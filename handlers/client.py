
from datetime import datetime
import pymongo
from Bot_Productive.handlers.password import mangodbpassword
from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from Bot_Productive.handlers.reply import keyboard, create_keyboard, del_keyboard, del_keyboard_query, remember_keyboard, remember_time_keyboard, delete_progres_keyboard
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from random import choice
import re


mongo_client = pymongo.MongoClient(f"mongodb+srv://{mangodbpassword}@cluster0.inrqtd0.mongodb.net/")
db = mongo_client.Telegram_bot
collection = db["Bot_Productive"]

date = datetime.now().date()
formatted_date = date.strftime("%d-%m-%Y")


class Form(StatesGroup):
    waiting_establish_habit = State()


class Waiting(StatesGroup):
    waiting_remember = State()


async def add_user(user_id):
    if collection.find_one({"_id": user_id}):
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
    else:
        print(f"–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ –¥–∞—Ç–æ—é {formatted_date} –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        result = collection.insert_one({
            "_id": user_id,
            "date": str(formatted_date),
            "unfulfilled_habits": [],
            "performance_habit": [],
            "number_performed": {},
            "remember_time": []
        })
        if result.acknowledged:
            print(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ.")
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}.")


# START
async def get_start(message: Message, bot: Bot):
    await bot.send_message(chat_id=message.from_user.id, text=f"–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}, —è –±–æ—Ç —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –≤–∏—Ä–æ–±–∏—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –∑–≤–∏—á–∫–∏", reply_markup=keyboard)
    await add_user(message.from_user.id)


async def button_text_handler(message: Message, bot: Bot, state: FSMContext):
    if message.text == "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–≤–∏—á–∫—É":
        await state.clear()
        await state.set_state(Form.waiting_establish_habit)
        await bot.send_message(chat_id=message.from_user.id, text="–í–µ–¥—ñ—Ç—å —Å–≤–æ—é –∑–≤–∏—á–∫—É, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–æ–¥ –¥–∞–Ω–∏—Ö –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É'")
    elif message.text == "–í–∏–¥–∞–ª–µ–Ω–Ω—è":
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –í–∏ –æ–±—Ä–∞–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=del_keyboard)
    elif message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥":
        await bot.send_message(chat_id=message.from_user.id, text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=keyboard)
    elif message.text == "üèÜ –ü—Ä–æ–≥—Ä–µ—Å":
        await bot.send_message(chat_id=message.from_user.id, text="üèÜ –í–∏ –æ–±—Ä–∞–ª–∏ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ–≥—Ä–µ—Å", reply_markup=remember_keyboard)
    elif message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ ":
        await bot.send_message(chat_id=message.from_user.id, text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=keyboard)
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é")


async def establish_habit(message: Message, bot: Bot, state: FSMContext):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É":
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text="–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –≤–æ–¥ –¥–∞–Ω–∏—Ö")
    elif collection.find_one({"_id": message.chat.id}):
        collection.update_one(
            {"_id": message.chat.id},
            {"$push": {"unfulfilled_habits": message.text}}
        )
        await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –∑–≤–∏—á–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω–∞ ")
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–ß–æ–º—É—Å—å –≤–∞—Å –Ω–µ–º–∞ —É –±–∞–∑—ñ, –±—É–¥—å –ª–∞—Å–∫–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É start")


async def done_habits(message: Message, bot: Bot):
    if collection.find_one({"_id": message.from_user.id}):
        document = collection.find_one({"_id": message.from_user.id})
        if not document["unfulfilled_habits"]:
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–í–∏ —â–µ –Ω–µ –≤–ø–∏—Å–∞–ª–∏ –∑–≤–∏—á–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–≤–∏—á–∫—É'")
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–Ø–∫—ñ —Ü—ñ–ª—ñ –≤–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–ª–∏?", reply_markup=await create_keyboard(document["unfulfilled_habits"])
                                   )
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–ß–æ–º—É—Å—å –≤–∞—Å –Ω–µ–º–∞ —É –±–∞–∑—ñ, –±—É–¥—å –ª–∞—Å–∫–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É start")


async def execution_habit(message: Message, bot: Bot):
    document = collection.find_one({"_id": message.from_user.id})
    performance_habit = document["performance_habit"]
    tasks_formatted = '\n'.join(performance_habit)
    await bot.send_message(chat_id=message.from_user.id, text=f"‚úÖ –¢–∏ –≤–∏–∫–æ–Ω–∞–≤ {len(performance_habit)} –∑–∞–≤–¥–∞–Ω—å:\n{tasks_formatted}")


async def number_performed(message: Message, bot: Bot):
    document = collection.find_one({"_id": message.from_user.id})
    if document["number_performed"]:
        number = document["number_performed"]
        try:
            output = "\n".join([f"{key}: {value}" for key, value in number.items()])
            await bot.send_message(chat_id=message.from_user.id, text=output)
        except AttributeError:
            await bot.send_message(chat_id=message.from_user.id, text="–í–∏ —â–µ –Ω—ñ —á–æ–≥–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏")
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —â–æ–± –≤–æ–Ω–∏ –∑'—è–≤–∏–ª–∏—Å—å, "
                                                                  "–ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –≤–∫–ª–∞–¥–∫—É '–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–≤–∏—á–∫–∏'")


async def delete_button(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    document = collection.find_one({"_id": message.from_user.id})
    if not document["unfulfilled_habits"] or not ["performance_habit"]:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í–∏ —â–µ –Ω–µ –≤–ø–∏—Å–∞–ª–∏ –∑–≤–∏—á–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–≤–∏—á–∫—É'")

    else:
        all_document = document["unfulfilled_habits"] + document["performance_habit"]
        await bot.send_message(chat_id=message.from_user.id,
                               text="–û–±–µ—Ä—ñ—Ç—å –∑–≤–∏—á–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=await del_keyboard_query(all_document)
                               )


async def inline_done_habits(callback_query: CallbackQuery):
    await callback_query.bot.answer_callback_query(callback_query.id)
    if callback_query.data.startswith("executed"):
        # –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ "performance_habit"
        collection.update_one(
            {"_id": callback_query.message.chat.id},
            {"$push": {"performance_habit": callback_query.data[9:]}}
        )
        # –†–∞—Ö—É—î —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –∑–≤–∏—á–∫—É
        collection.update_one(
            {"_id": callback_query.message.chat.id},
            {"$inc": {f"number_performed.{callback_query.data[9:]}": 1}}
        )
        # –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ "unfulfilled_habits"
        collection.update_one(
            {"_id": callback_query.message.chat.id},
            {"$pull": {"unfulfilled_habits": callback_query.data[9:]}}
        )
        document = collection.find_one({"_id": callback_query.message.chat.id})
        if not document["unfulfilled_habits"]:
            praise = ["–û–≥–æ, —Ç–∏ –≤—Å–µ –≤–∏–∫–æ–Ω–∞–≤",
                      "–¢–∏ –≤–∏–∫–æ–Ω–∞–≤ –≤—Å—ñ —Å–≤–æ—ó –∑–≤–∏—á–∫–∏, –ø—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ",
                      "–û–π –π–æ–π –π–æ–π, —è–∫–∏–π —Ç–∏ –∫—Ä—É—Ç–∏ —Ç–∏ –≤–∏–∫–æ–Ω–∞–≤ –≤—Å—ñ —Å–≤–æ—ó –ø–ª–∞–Ω–∏",
                      "–Ø–∫–∏–π —Ç–∏ –∫—Ä—É—Ç–∏–π, —Ç–∏ –≤—Å–µ –≤–∏–∫–æ–Ω–∞–≤",
                      "–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –≤—ñ–¥–ø–æ—á–∏—Ç–∏, —Ç–∏ –≤—Å–µ –≤–∏–∫–æ–Ω–∞–≤"
                      ]
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text=choice(praise)
                                                       )
        else:
            await callback_query.bot.send_message(chat_id=callback_query.message.chat.id,
                                                  text=f"‚úÖ –í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏  {callback_query.data[9:]}"
                                                  )
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–ü–æ–∑–Ω–∞—á—Ç–µ —Ü—ñ–ª—ñ —è–∫—ñ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏",
                                                       reply_markup=await create_keyboard(document["unfulfilled_habits"])
                                                       )
    elif callback_query.data.startswith("del"):
        habit_to_delete = callback_query.data[4:]
        updated = False

        for field in ["unfulfilled_habits", "performance_habit"]:
            if collection.find_one({field: habit_to_delete, "_id": callback_query.message.chat.id}):
                collection.update_one(
                    {"_id": callback_query.message.chat.id},
                    {"$pull": {field: habit_to_delete}}
                )
                updated = True
                break
        if updated:
            document = collection.find_one({"_id": callback_query.message.chat.id})
            all_document = document["unfulfilled_habits"] + document["performance_habit"]
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–ü–æ–∑–Ω–∞—á—Ç–µ —Ü—ñ–ª—ñ —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏",
                                                       reply_markup=await del_keyboard_query(all_document)
                                                       )
            await callback_query.bot.send_message(chat_id=callback_query.message.chat.id,
                                                  text=f"‚ùå –í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –∑–≤–∏—á–∫—É {habit_to_delete}"
                                                  )
        else:
            await callback_query.bot.send_message(chat_id=callback_query.message.chat.id,
                                                  text="–ë—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏")
    elif callback_query.data.startswith("rem"):
        collection.update_one(
            {"_id": callback_query.message.chat.id},
            {"$pull": {"remember_time": callback_query.data[4:]}}
        )
        await callback_query.bot.send_message(chat_id=callback_query.message.chat.id,
                                              text=f"–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏: {callback_query.data[4:]}"
                                              )
        document = collection.find_one({"_id": callback_query.message.chat.id})
        if not document["remember_time"]:
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–¢–∏ –≤–∂–µ –≤—Å–µ –≤–∏–¥–∞–ª–∏–≤")
        else:
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–Ø–∫–µ —â–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏",
                                                       reply_markup=await remember_time_keyboard(document["remember_time"])
                                                       )
    elif callback_query.data.startswith("prog"):
        collection.update_one(
            {"_id": 873674161},
            {"$unset": {f"number_performed.{callback_query.data[5:]}": ""}}
        )
        await callback_query.bot.send_message(chat_id=callback_query.message.chat.id,
                                              text=f"–¢–∏ –≤–∏–¥–∞–ª–∏–≤ {callback_query.data[5:]}")
        document = collection.find_one({"_id": callback_query.message.chat.id})
        if not document["number_performed"]:
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–¢–∏ –≤–∂–µ –≤—Å–µ –≤–∏–¥–∞–ª–∏–≤")
        else:
            await callback_query.bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                                       message_id=callback_query.message.message_id,
                                                       text="–Ø–∫–∏–π —â–µ –ø—Ä–æ–≥—Ä–µ—Å —Ç–∏ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏",
                                                       reply_markup=await delete_progres_keyboard(document["remember_time"])
                                                       )
    else:
        await callback_query.bot.send_message(chat_id=callback_query.message.chat.id, text="–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫")


async def remember_time(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Waiting.waiting_remember)
    await bot.send_message(chat_id=message.from_user.id, text="–í–µ–¥—ñ—Ç—å —á–∞—Å –∫–æ–ª–∏ –≤–∞–º –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏")


async def remember_time_waiting(message: Message, bot: Bot, state: FSMContext):
    time_pattern = re.compile(r"^([01]?\d|2[0-3]):([0-5]\d)$")
    if time_pattern.match(message.text):
        await bot.send_message(chat_id=message.from_user.id, text=f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, {message.text}")
        collection.update_one(
            {"_id": message.from_user.id},
            {"$push": {"remember_time": message.text}}
        )
    elif message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É":
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text="–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –≤–æ–¥ –¥–∞–Ω–∏—Ö")
    else:
        await bot.send_message(chat_id=message.from_user.id, text=f"–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")


async def delete_remember_time_waiting(message: Message, bot: Bot, state: FSMContext):
    document = collection.find_one({"_id": message.from_user.id})
    if document["remember_time"]:
        await bot.send_message(chat_id=message.from_user.id, text="–Ø–∫–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏?",
                               reply_markup=await remember_time_keyboard(document["remember_time"]))
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–∞—Å—É")
        await state.clear()


async def delete_progres(message: Message, bot: Bot):
    document = collection.find_one({"_id": message.from_user.id})
    if document["number_performed"]:
        await bot.send_message(chat_id=message.from_user.id, text="–Ø–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–¥–∞–Ω—å –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏?",
                               reply_markup=await delete_progres_keyboard(document["number_performed"]))
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —â–æ–± –≤–æ–Ω–∏ –∑'—è–≤–∏–ª–∏—Å—å, "
                                                                  "–ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –≤–∫–ª–∞–¥–∫—É '–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–≤–∏—á–∫–∏'")
